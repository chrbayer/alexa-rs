use std::collections::BTreeMap;
use chrono::{DateTime,UTC};
use iron::prelude::Plugin;
pub struct Request {
    pub session: Session,
    pub timestamp: DateTime<UTC>,
    pub body: RequestBody,
    pub request_id: String,
}
pub enum RequestBody {
    IntentRequest(IntentRequest),
    LaunchRequest(LaunchRequest),
    SessionEndedRequest(SessionEndedRequest),
}
#[derive(Debug)]
pub struct IntentRequest {
    name: String,
    slots: BTreeMap<String,String>,
}
pub struct LaunchRequest{}
pub struct SessionEndedRequest{}
impl Request {
    pub fn from(req: &mut iron::Request, app_id: &str) -> Result<Request,&'static str> {
        let parsed = req.get::<bodyparser::Struct<RequestInternal>>();
        match parsed {
            Ok(Some(parsed)) => {
                if parsed.session.application.applicationId == app_id {
                    parsed.into_request()
                } else {
                    Err("Invalid application id.")
                }
            },
            Ok(None) => Err("No request body"),
            Err(_) => Err("Error reading / parsing request body"),
        }
    }
}

#[derive(Deserialize,Clone)]
struct RequestInternal {
    version: String,
    session: Session,
    request: RequestBodyInternal,
}
#[derive(Deserialize,Clone)]
pub struct Session {
    new: bool,
    #[serde(rename="sessionId")]
    session_id: String,
    attributes: BTreeMap<String, serde_json::Value>,
    application : Application,
    user: User,
}
#[derive(Deserialize,Clone)]
#[allow(non_snake_case)]
struct Application {
    applicationId: String,
}
#[derive(Deserialize,Clone)]
struct User {
    #[serde(rename="userId")]
    user_id: String,
    #[serde(rename="accessToken")]
    access_token: String,
}
#[derive(Deserialize,Clone)]
#[allow(non_snake_case)]
struct RequestBodyInternal {
    #[serde(rename="type")]
    request_type: RequestType,
    requestId: String,
    timestamp: String,
    intent: Option<IntentInternal>,
    reason: Option<Reason>,
}
#[derive(Deserialize,Clone)]
enum RequestType {
    LaunchRequest,
    IntentRequest,
    SessionEndedRequest,
}
#[derive(Deserialize,Clone)]
struct IntentInternal {
    name: String,
    slots: BTreeMap<String, SlotInternal>,
}
#[derive(Deserialize,Clone)]
struct SlotInternal {
    name: String,
    value: String,
}
#[derive(Deserialize,Clone)]
#[allow(non_camel_case_types)]
pub enum Reason {
    USER_INITIATED,
    ERROR,
    EXCEEDED_MAX_REPROMPTS,
}

impl RequestInternal {
    fn into_request(self) -> Result<Request,&'static str> {
        let session = self.session;
        let timestamp: DateTime<UTC> = match self.request.timestamp.parse(){
            Ok(d) => d,
            Err(_) => { return Err("Could not parse timestamp"); }
        };
        let rbr: Result<RequestBody,&'static str> = match self.request.request_type {
            RequestType::LaunchRequest => {
                Ok(RequestBody::LaunchRequest(LaunchRequest{}))
            },
            RequestType::IntentRequest => {
                Ok(RequestBody::IntentRequest(IntentRequest{name: "foo".to_string(), slots: BTreeMap::new()}))
            },
            RequestType::SessionEndedRequest => {
                Ok(RequestBody::SessionEndedRequest(SessionEndedRequest{}))
            }
        };
        if let Ok(rb) = rbr {
            Ok(Request { session: session, timestamp: timestamp, body: rb, request_id: self.request.requestId })
        } else {
            Err("?")
        }
    }
}
